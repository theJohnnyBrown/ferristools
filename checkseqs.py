#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2010 - 2011, University of New Orleans
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
import sys
from cogent.parse.fasta import MinimalFastaParser
import re

MISMATCHES = "error_sequences.fna"


def mismatched_seqs(fasta):
    wtf = []
    for s in MinimalFastaParser(fasta):
            newid = s[0].split()[0]
            oldid = re.sub(r'[^0-9a-zA-Z\.]','.',s[0].split()[1])
            if not oldid.startswith(newid.split("_")[0]):
                wtf.append(s)

    return wtf

if __name__ == "__main__":
    try:
        splib_seqs = open(sys.argv[1])
        
        for s in mismatched_seqs(splib_seqs):
            print ">%s\n%s\n" % s
    except:
        print """USAGE: %s seqs.fna

        Where seqs.fna is the fasta file generated by split_libraries.py.
        
        The script checks that the sample ID assigned by qiime matches the
        original, and prints any mismatches. You may wish to pipe the output to a
        file, as if there is one mismatch there will likely be many.

        The script prints no output if it finds no mismatched sequences.

        To see the number of mismatches, use the script like so:
            python %s seqs.fna > mismatches.fna

            """ % (sys.argv[0],sys.argv[0])

        raise
